""""""""""""""""""""""""""""""""""""""""
"           Vundle Settings            "
"           """"""""""""""""""""""""""""""""""'"""""
set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
" Plugin 'VundleVim/Vundle.vim'
"
" " My Bundles here:
" "" IDE
" Plugin 'a.vim'
" Plugin 'alvan/vim-closetag'
" "Plugin 'bronson/vim-trailing-whitespace'
" Plugin 'grep.vim'
" Plugin 'jiangmiao/auto-pairs'
" Plugin 'scrooloose/nerdcommenter'
" Plugin 'taglist.vim'
" "Plugin 'valloric/youcompleteme'
" Plugin 'wincent/command-t'
" Plugin 'wesleyche/srcexpl'
" "" Git helper
" Plugin 'airblade/vim-gitgutter', {'pinned': 1}  " use stable branch 'nvim'
" Plugin 'tpope/vim-fugitive'
" "" Beautify
" Plugin 'itchyny/lightline.vim'
" Plugin 'jacoborus/tender.vim'
" "" Convinience
" Plugin 'Lokaltog/vim-easymotion'
"
" call vundle#end()
" filetype plugin indent on     " required!
" "
" " Brief help
" " :PluginList          - list configured bundles
" " :PluginInstall(!)    - install(update) bundles
" " :PluginSearch(!) foo - search(or refresh cache first) for foo
" " :PluginClean(!)      - confirm(or auto-approve) removal of unused bundles
" "
" " see :h vundle for more details or wiki for FAQ
"
"set nu
"set title
"set tabstop=2
"set sw=2
"set ts=2
"set sts=2
"set ic
"set hlsearch
"set expandtab
"set modifiable
"set exrc
"set secure
"set autoindent
"set cindent
"set cinoptions+=g0
"set encoding=utf-8
"set fileencodings=utf-8,cp949
"
"" Color Scheme
set t_Co=256
colorscheme tender

set backspace+=start,eol,indent

" Remove white trailing
" nnoremap <Leader>rtw :%s/\s\+$//e<CR>"
"
" " AutoClose for html
" let g:closetag_filenames = "*.html,*.xhtml,*.phtml"
"
" """"""""""""""""""""""""""""""""""""""""
" "                Grep                  "
" """"""""""""""""""""""""""""""""""""""'"
" if executable('ag')
"     let Grep_Path = '/usr/bin/ag'
"     endif
"
"     let Grep_Skip_Files='ChangeLog* tags *.bak *.o *.order *.mm'
"
"     " Search a word under the cursor
"     nmap <C-G> yiw:Rgrep <C-R>"<CR>
"
"     """"""""""""""""""""""""""""""""""""""""
"              Command-t               "
"              """"""""""""""""""""""""""""""""""""""'"
let g:CommandTMaxFiles = 1000000
let g:CommandTMaxDepth = 30
let g:CommandTInputDebounce = 50
let g:CommandTFileScanner = 'find'
let g:CommandTMaxCachedDirectories = 10

""""""""""""""""""""""""""""""""""""""""
"     Switch between source/header     "
"     """"""""""""""""""""""""""""""""""""""'"
map <C-A> :A<CR>

""""""""""""""""""""""""""""""""""""""""
"              lightline               "
"              """"""""""""""""""""""""""""""""""""""'"
set noshowmode
set laststatus=2
let g:lightline = {
      \ 'colorscheme': 'tender',
      \ 'active': {
      \   'left': [ [ 'mode'  ],
      \             [ 'fugitive'  ],
      \             [ 'filename', 'modified'  ] ]
      \ 
},
      \ 'component' : {
      \       'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
      \ 
},
      \ 'component_visible_condition': {
      \       'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
      \ 
}
      \ 
}

""""""""""""""""""""""""""""""""""""""""
"           Compelete hash             "
"           """"""""""""""""""""""""""""""""""'"""""
autocmd FileType bitbake :setlocal iskeyword+=.
autocmd FileType bitbake :setlocal iskeyword-=_

let g:remoteDict = {
      \ 'chromium53': 'ssh://yeonjoo.choi@wish.lge.com:29444/gpro/webos-pro/chromium53',
      \ 'appswitching-control-block': 'ssh://yeonjoo.choi@wish.lge.com:29444/we/wall/module/acb'
      \ 
}

function! ReplaceToHash()
  let l:pathForTags = g:remoteDict[expand("%:t:r")]." submissions/".expand("<cword>")
  normal daw
  return split(system("git ls-remote --tags ".pathForTags))[0]
endfunction

nmap <silent> <Leader>ch "=ReplaceToHash()<CR>P

""""""""""""""""""""""""""""""""""""""""
"       Vim like a source insight      "
"       """"""""""""""""""""""""""""""""""'"""""
nmap <F6> :TlistToggle<CR>
let Tlist_Ctags_Cmd = "/usr/bin/ctags"
let Tlist_Inc_Winwidth = 0
let Tlist_Exit_OnlyWindow = 0
let Tlist_Auto_Open = 0
let Tlist_Use_Left_Window = 1

nmap <F8> :SrcExplToggle<CR>

nmap <C-H> <C-W>h
nmap <C-J> <C-W>j
nmap <C-K> <C-W>k
nmap <C-L> <C-W>l
let g:SrcExpl_winHeight = 8
let g:SrcExpl_refreshTime = 100
let g:SrcExpl_isUpdateTags = 0

let g:SrcExpl_jumpKey = "<ENTER>"
let g:SrcExpl_gobackKey = "<SPACE>"
map <F2> :tnext^M
map <F3> :tprevious^M

syntax on


set fileencodings=utf-8,euc-kr
au BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \ exe "norm g`\"" |
      \ endif




if has("cscope")
  set cscopetag
  set csto=0
  if filereadable("cscope.out")
    cs add cscope.out
  elseif $CSCOPE_DB != ""
    cs add $CSCOPE_DB
  endif
  set cscopeverbose

  nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
  nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
  nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
  nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
  nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
  nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
  nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
  nmap <C-\>d :cs find d ^<C-R>=expand("<cword>")<CR><CR>

  nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
  nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
  nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>

  nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@><C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
  nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
  nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>
endif


